= stylesheet_link_tag "vis_style"
-#set the size of the canvas to draw on to be the one defined in the controller
:css
  #canvas_container {width: #{@default_width}px; height: #{@default_height}px;}

-# specifies the data that we're going to be working with in javascript
:javascript
  #{javascript_graph(@vis.nodes,@vis.edges)} 
= javascript_include_tag "raphael-min.js" #for drawing
= javascript_include_tag "causemap_rjs.js" #the draw code itself


#canvas_container
#interaction
  #reset_form
    = form_tag({:action => "index", :cmd => 'reset_graph'}, {:remote => true, :method => :get}) do
      #inputs
        = label_tag "Number of Nodes:"
        = number_field_tag "args[node_count]", @default_node_count, :in => 1...100
        %br
        = label_tag "Ratio of Edges:"
        = number_field_tag "args[edge_ratio]", @default_edge_ratio, :min => 0.0, :max => 1.0, :step => 0.01
      #reset
        = submit_tag "Reset Graph"
  #other_buttons
  = button_to "Random Spread"      , {:action => "index" , :cmd => 'place_randomly'}       , {:remote => true , :method => :get}
  = button_to "Circle Nodes"       , {:action => "index" , :cmd => 'circle_nodes'}         , {:remote => true , :method => :get}
  = button_to "Fruchterman Layout" , {:action => "index" , :cmd => 'fruchterman_reingold'} , {:remote => true , :method => :get}
  = button_to "Springy Layout"     , {:action => "index" , :cmd => 'springy'}              , {:remote => true , :method => :get}
  = button_to "Remove Edges"       , {:action => "index" , :cmd => 'remove_edges'}         , {:remote => true , :method => :get}

#debug
