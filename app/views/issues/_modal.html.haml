#popup_name.popup_block
  #modalhead.formheading_small
    Add New Causal Link
  .formcontentdiv_small{:style=>"padding-left:0px; padding-right:0px;"}
    // Title of the Issue
    %div{:class =>"title_edit", :style=>"padding-top:25px; margin-top:-25px;"}
           
      // Search text-field     
      %div{:style=>"float:left"}  
        %input{:id=>"query", :class=>"searchfield",:style=>"width:250px; margin:0px;" ,:placeholder => "Enter Issue name...", :autocomplete=>"off"}
      
      // Hidden div holding the reset button
      %div{:id=>"searchfield_reset"}         

      // Spinner
      %div{:style=>"float:left; margin:2px 10px -10px 25px;", :id=>"wait"}

      // Preview Button
      %div{:style=>"float:right"}
        %input{:type=>"button", :id=>"btn_preview", :class=>"preview_button", :value=>"Preview"}          

      %div{:style => "clear:both;"}
  
    %div{:id=>"results", :class=>"result-box"}            
    %div{:style => "clear:both"}
    %div{:class =>"wikicontent_edit"}
      
      %div{:id=>"image_preview"}                     
        %img{:src => "/images/issues/image.png", :style=>"background-color:transparent;opacity:0.1" }
        
        %div{:style=>"text-align:center;" }
          Wikipedia image
                
  
      %div{:id=>"text_preview"}
        %div#title_holder
        %div#text_holder  
          %img{:src => "/images/issues/text.png", :style=>"background-color:transparent;opacity:0.1" }
          %div{:style=>"text-align:center;"}
            Wikipedia text 
        
      %div{:style => "clear:both"}
        
    %div{:id=>"form_container"}
      - form_for Issue.new :id=>"relationship_form" do |f|
        
        .field  
          = f.hidden_field :wiki_url, :class=>"formfield", :id=>"frm_wiki_url"
                
        .field                   
          = f.hidden_field :description, :class=>"formfield", :id=>"frm_descr"
                              
        .field
          = f.hidden_field :short_url, :class=>"formfield", :id=>"frm_img_url"
  
        .field
          = f.hidden_field :title, :class =>"formfield", :id=>"frm_title"

        .field
          - if current_user
            = f.hidden_field :user_id, :class=>"formfield", :id=>"frm_user_id", :value=>current_user.id

                
        .actions
          %div{:style=>"float:left;margin:5px 0px -5px 0px;"}
            %form
              %input{:type=>"hidden", :name=>"action_carrier", :id=>"frm_action"}
              %input{:type=>"hidden", :name=>"id_carrier", :id=>"frm_type_id"}
              /%input#rad_cause{:type => "radio", :name=>"causality_rad", :value=>"Cause"}
              /%span Cause
              /%input#rad_effect{:type => "radio", :name=>"causality_rad", :value=>"Effect"} 
              /%span Effect
          = f.submit 'Create', :class=>"save_button", :name=>"save_issue_rel_button", :id=>"val_collector"
          %div{:style => "clear:both"}


%script{:src => "http://maps.google.com/maps/api/js?sensor=false&libraries=panoramio", :type => "text/javascript"}
%script{:src => "http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css", :type => "text/javascript"}
%script{:src => "http://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js", :type => "text/javascript"}
%script{:src => "http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js", :type => "text/javascript"}
%script{:type => "text/javascript"}
  
  
  var tooltip_preview_text = '';
  var accept_link_text = '';

  var hold_image_link = '';
  var hold_text_descr = '';
   
  // Make sure the DOM is loaded
  $(document).ready(function(){

  $(".mapcontainer").hide();

  // I N I T I A L    F O R M A T T I N G / P R O C E S S I N G
  
  // (0.) Align the blobs and arrows Correctly based on height of the Issueblock
  $('img.wikiimage').ready(function(){
  var block_height = $('.issueblock').height();
  var arrow_height = $('.arrow-carrier-right').height();
  var blob_height  = $('.blob-carrier').height();
  var right_height = $('.arrow-leftward').height();
  
  var arrow_marg_top = (block_height - arrow_height)/2
  var blob_marg_top  = (block_height - blob_height - 42)/2
  var right_marg_top = (block_height - right_height - 40)/2
  
  $('.arrow-carrier-right, .arrow-carrier-left').animate({'margin-top': arrow_marg_top});
  $('.blob-carrier').animate({'margin-top': blob_marg_top});
  $('.arrow-leftward').animate({'margin-top': right_marg_top});
  /$(".blue_banner").effect("highlight", {color: '#4DB8DB'}, 1000);
  
  // Ensure that the height of Map remains same as the rest of the content
  var mapcontainer_height = $('.wikicontent').height();
  $('#map_canvas').css({'height': mapcontainer_height});
  });
  
  // (1.) Ensure that Panoramio Has loaded the pictures
  //$("#panoramio_iframe").load(function(){
  // Function for Loading Maps 
  // Doing this after the iFrame loads 
  // to keep the height of map_canvas consistent.  
  //});

  // (2.) D I S M I S S    T H E    F L A S H    N O T I C E
  if ($('#notice').html().trim()) {
  $("#notice_container").effect("bounce", { times:3 }, 200);
  $('#notice').css({display : 'block'});
  }
  
  $("#notice_container a.closebutton").click(function(){
  $("#notice_container").slideUp(100);
  });
  
  // (3.) Show or Hide the Suggestion Scroll buttons if required

  if ($(".cause_carousel").height() > 30){
  $(".cause_scroller").css({display : 'inline'});
  }

  if ($(".effect_carousel").height() > 30){
  $(".effect_scroller").css({display : 'inline'});
  }

  if ($(".inhibitor_carousel").height() > 30){
  $(".inhibitor_scroller").css({display : 'inline'});
  }
  
  if ($(".inhibited_carousel").height() > 30){
  $(".inhibited_scroller").css({display : 'inline'});
  }
    

  // (4.) Show or Hide the Accepted Scroll buttons if required
  if ($(".accepted_causes").height() > 64){
  $(".cause_scroll").css({display : 'block'});
  }

  if ($(".accepted_effects").height() > 64){
  $(".effect_scroll").css({display : 'block'});
  }

  if ($(".accepted_inhibitors").height() > 64){
  $(".inhibitor_scroll").css({display : 'block'});
  }

  if ($(".accepted_inhibited").height() > 64){
  $(".inhibited_scroll").css({display : 'block'});
  }
  

      
  // D E L E T E     C O N F I R M A T I O N
  var href_carrier = '';
  var bubble_to_remove = '';
        
  $(".del-relation").click(function() {
  var title = $(this).data('title');
  var msg = $(this).data('confirm');
  href_carrier = $(this).attr('href');
  bubble_to_remove = $(this).parents(".bubble");
  showPopup(title, msg);
  return false;      
  });

  $("#confirm_yes").click(function() {
  /$("#confirm_popup").fadeOut('slow');
  $("#confirm_wait").html('<img border="0" src="/images/system/spinner.gif"/>');
  $.ajax({
  type: "DELETE",
  url: href_carrier,
  cache: false,
  success: function(){
  bubble_to_remove.fadeOut('slow');
  bubble_to_remove = '';
  $("#confirm_msg").html('Causal Link Deleted!'); 
  $("#confirm_buttons").hide(); 
  $("#confirm_wait").empty();
  $("#confirm_popup").delay(2000).fadeOut('slow', function(){
  $('#fade').delay(2000).remove();
  });
  
  }
  });  
  /location.href = href_carrier;
  });
    
  $("#confirm_cancel").click(function() {
  $('#fade').remove();
  $("#confirm_popup").fadeOut('slow');    
  href_carrier = '';
  });
  
  // C L I C K    E V E N T    F O R    R E F E R E N C E S 
  $(".relationship_boost").click(function(){
  $(".relationship_addref,.ref_error").css({display : 'none'});
  $(".searchfield_smaller").val('http://');
  $(this).siblings(".relationship_addref").css({display : 'block'});
  });
  
  // Closing the references
  $(".close_addref").click(function(){
  $(this).parents(".relationship_addref").css({display : 'none'});
  $(this).siblings(".ref_error").css({display : 'none'});
  $(this).siblings(".searchfield_smaller").val('http://');
  });

  // A R R O W    K E Y    N A V I G A T I O N    F O R    T H E    M O D A L
  window.displayBoxIndex = -1;
  
  
  // Arrow keys pressed while being within the Query Box
  $("#query").keyup(function(e) 
  {
  if (e.keyCode == 40){  
  Navigate(1);}
  if(e.keyCode==38){
  Navigate(-1);}
  if (e.keyCode == 13){
  $("#query").val($(".suggestion").eq(displayBoxIndex).html());
  $("#results").empty();
  displayBoxIndex = -1;
  }
  });
                   
  var Navigate = function(diff) {
  displayBoxIndex += diff;
  var oBoxCollection = $(".suggestion");
  if (displayBoxIndex >= oBoxCollection.length)
  displayBoxIndex = 0;
  if (displayBoxIndex < 0)
  displayBoxIndex = oBoxCollection.length - 1;
  var elem_class = "suggestion_hover";
  oBoxCollection.removeClass(elem_class).eq(displayBoxIndex).addClass(elem_class);
  }

  $(".suggestion").live('mouseover', function(){
  displayBoxIndex = $(this).index();
  var elem_class = "suggestion_hover";
  var oBoxCollection = $(".suggestion");
  oBoxCollection.removeClass(elem_class).eq(displayBoxIndex).addClass(elem_class);  
  });  

  $("#relationship_form").submit(function(){
  $("#frm_wiki_url").val("http://en.wikipedia.org/wiki/" + ($("#query").val()).split(' ').join('_'));
  alert($("#frm_wiki_url").val()); 
  });

  // F U N C T I O N S    C A L L I N G    M E D I A W I K I    A P I

  var url='http://en.wikipedia.org/w/api.php?action=opensearch&search=';
  var url_google_img = 'http://ajax.googleapis.com/ajax/services/search/images?rsz=large&start=0&v=1.0&q=';
  var query;
  var arr_length = 0;
  var search_results = [];
  var ignore_keys_array = [18,20,17,40,35,13,27,36,45,37,93,91,34,33,39,16,9,38];
  var mouse_is_inside = false;
  var url_img_name = 'http://en.wikipedia.org/w/api.php?action=parse&prop=text&section=0&redirects&format=json&page=';
  var jsonData = " ";
  var img_src = '';
  var text_preview = '';
  
  // Variables to store form field values for Submit:
  var form_title = '';
  var form_descr = '';
  var form_url = '';
  var form_image = '';  
  
  //  (1) *** Monitoring the keyUp action on the query textbox ***
  $('#query').bind('keyup', function(e){

  //  Get value of query from the textbox			
  query=$("#query").val();

  if (query =='' || e.keyCode == 27){
  $("#results").empty(); 
  }
	
  //  If the user types in something and it is a valid key	
  if (query != '' && ($.inArray(e.keyCode, ignore_keys_array) == -1) ){
  
  //  Clear the suggestions
  $("#results").empty();  
  
  //  Initialize the suggestion box with a spinner		
  $("#results").append('<img border="0" src="/images/system/spinner.gif" class="result-spinner"  />');
  
  //  Talk to mediawiki API to fetch suggestions 
  $.getJSON(url+encodeURIComponent(query)+'&callback=?',function(data){
  
  search_results = data[1];
	
  //  Limiting the suggestions to a maximum of 5
  if (search_results.length <= 4) {
  arr_length = search_results.length - 1;
  } else {
  arr_length = 4;
  }
  
  //  Clear the suggestions
  $("#results").empty();
  
  //  Loop through first 5 (maximum) suggestions and show 'em
  for(var i = 0; i<=arr_length; i++){
  
  $("#results").append('<div class="suggestion" >'+search_results[i]+'</div>');
  
  }   //       End of for loop
  
  }); //     End of getJSON function
  
  }   //   End of If structure

  }); // End of keyUp function 


  //  G E T    Q U E R Y    F R O M    S E A R C H - B O X

  $('.suggestion').live("click", function(){
  $("#query").val($(this).html()); 
  $("#results").empty();
  displayBoxIndex = -1;
  });

  // Enable Create button if user selects Caue/Effect
  $("#rad_cause, #rad_effect").change(function(){
  
  $("#val_collector").removeAttr("disabled");  // enable the submit button
  
  if ($("#rad_cause").is(':checked')) {
  $("#frm_action").val('C');                   // pass C if its a Cause
  }

  if ($("#rad_effect").is(':checked')) {
  $("#frm_action").val('E');                   // pass E if its an Effect
  }
  
  
  });

  //  R E T R I E V E    C O N T E N T    F R O M    W I K I P E D I A
  
  $("#btn_preview").click(function(){
  if ($("#query").val()){
  $("#results").empty();
  /$("#searchfield_reset").css({'display' : 'block'});
  /$("#query").attr("disabled", "disabled");
  parseJSON();
  $("#title_holder").html($("#query").val());
  $("#results").empty();
  }
  });

  //  P A R S E    T H E    R E C E I V E D    J S O N    C O N T E N T

  function parseJSON() {
  // initialize spinner
  $("#wait").html('<img border="0" src="/images/system/spinnergray.gif"/>');    	
  // create the json url
  jsonData = $.trim(url_img_name+encodeURIComponent($("#query").val())+'&callback=?');  
  // parse the json
  $.getJSON(jsonData, function (data) {
  $.each(data, function (key, val) {
  // call the getJson function
  getJson(val);    
  });    
  
  // remove spinner
  $("#wait").empty();
  // highlight
  //$("div#text_preview").effect("highlight", {color: '#AADDEE'}, 3000); 
  });}
  
  
  //  R E A D    T H E    P A R S E D    J S O N    F O R    C O N T E N T					
  function getJson(JData) {
   
  $.each(JData, function (Jkey, Jval) {
  if (Jval && typeof Jval == "object") {
  
  getJson(Jval);    
  
  } else {
  
  //  populate the description text
  text_preview = $(Jval.replace(/<p><br \/><\/p>/gi,'')).filter('p:first').text().replace(/\[\d+\]/gi,'');
  
  //  Throw error if no text was received
  if(text_preview == ''){
  text_preview = "No data! Please try a different keyword."
  
  // hide the save button
  $('#form_container').css("display", "none");
  // replace HTML of target Div
  $('#text_holder ').html('<img src = "/images/issues/text.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center; color:#CC0000">'+text_preview+'</div>', 400);  
  // show dummy image for image
  $('#image_preview').html('<img src = "/images/issues/image.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center; color:#CC0000">Not found!</div>', 400);
  
  //  If the search was successful - 
  } else {

  // shorten if beyond limit
  if(text_preview.length > 450){text_preview = text_preview.substring(0, 450) + '...';}

  // replace HTML of target Div
  $('#text_holder ').html(text_preview, 400);
  form_descr = $("#text_holder ").html();
  // show the form 
  $("#form_container").css("display", "block");

  // find the image from Json
  img_src = $(Jval).find('img.thumbimage').attr('src');  
  
  // if image not found from wikipedia, get it from google
  if (img_src == null){

  // retrieve JSON from google images search and pull the url for first image result
  $.getJSON(url_google_img+encodeURIComponent($("#query").val())+'&callback=?', function(data) {
  $.each(data.responseData.results, function(i,item){
  // replace HTML of target Div
  $('#image_preview').html('<img src="'+item.tbUrl+'" onError="this.src=\'/images/issues/image.png\'" class="wikiimage_edit"/><br />Google image');
  form_image = $('#image_preview').html();
  if ( i == 0 ) return false;
  });  
  });
  
  // if the image was found from WIKIPEDIA itself, then just go ahead and use that.
  } else {
  // replace HTML of target Div 
  $('#image_preview').html('<img src="'+img_src+'" onError="this.src=\'/images/issues/image.png\';" class="wikiimage_edit"/><br />wikipedia image');
  form_image = $("#image_preview img:first").attr("src");
  
  }	  //        END of If structure (checking for Image Success from Wikipedia)	  
  
  }   //      END of If structure (checking for Text Success from Wikipedia)
  
  }   //     END of If structure (checking for type Object)

  }); //   END of Each loop
  
  }   // END of function  

  // R E S E T    M O D A L
  /$("#searchfield_reset").click(function(){
  /$("#query").attr("disabled", "");
  /$("#query").val("");
  //hide save button
  /$('#form_container').css("display", "none");
  // replace HTML of target Div
  /$('#text_holder ').html('<img src = "/images/issues/text.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center;">Wikipedia image</div>');  
  // show dummy image for image
  /$('#image_preview').html('<img src = "/images/issues/image.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center;">Wikipedia text</div>');
  /$("#searchfield_reset").css({'display' : 'none'});
  /});
  

  function valueCollect() {
  $("#frm_wiki_url").val("http://en.wikipedia.org/wiki/" + ($("#query").val()).split(' ').join('_')); 
  $("#frm_img_url").val($('#image_preview').find("img").attr("src"));
  $("#frm_descr").val(form_descr);
  $("#frm_title").val($("#title_holder").html());
  }

  $("#val_collector").live('click', function(){
  /if ($("#rad_cause").is(':checked') || $("#rad_effect").is(':checked'))
  /{ 
  valueCollect();
  /}
  });


  //   Close suggestions if clicked elsewhere
  $('#results, #query').hover(function(){ 
  mouse_is_inside=true; 
  }, function(){ 
  mouse_is_inside=false; 
  });

  $("body").mouseup(function(){ 
  if(! mouse_is_inside) {
  $("#results").empty();
  $("#wait").empty(); 
  displayBoxIndex = -1; }
  });
  
  // CHECK THE CORRECT RADIO BUTTON DEPENDING ON SELECTION
  $(".cause_link, .effect_link, .inhibitor_link, .inhibited_link, .super_link, .sub_link").click(function(){
  var className = $(this).attr('class');
  var issueTitle = '#{@issue.title.to_s}'
  // CAUSE
  if (className.indexOf("cause") >= 0){
  $("#frm_action").val('C');
  $("#modalhead").html('Add a Cause of ' + issueTitle);  
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  $("#frm_action").val('E');
  $("#modalhead").html('Add an Effect of ' + issueTitle);  
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  $("#frm_action").val('I');
  $("#modalhead").html('Add something that reduces ' + issueTitle);  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  $("#frm_action").val('R');
  $("#modalhead").html('Add something reduced by ' + issueTitle);  
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  $("#frm_action").val('P');
  $("#modalhead").html('Add a Superset of ' + issueTitle);  
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  $("#frm_action").val('S');
  $("#modalhead").html('Add a Subset of ' + issueTitle);  
  }
  
  $("#query").val($(this).html().trim());
  $("#frm_type_id").val(#{@issue.id});
  });



  $("#add_cause_btn, #add_effect_btn, #add_inhibitor_btn, #add_inhibited_btn, #add_super_btn, #add_sub_btn").click(function(){
  var idName = $(this).attr('id');
  /alert(idName);
  var issueTitle = '#{@issue.title.to_s}'
  // CAUSE
  if (idName == "add_cause_btn"){
  $("#frm_action").val('C');
  $("#modalhead").html('Add a Cause of ' + issueTitle);   
  }
  // EFFECT
  else if (idName == "add_effect_btn"){    
  $("#frm_action").val('E');
  $("#modalhead").html('Add an Effect of ' + issueTitle);  
  }
  // INHIBITOR
  else if (idName == "add_inhibitor_btn"){ 
  $("#frm_action").val('I');
  $("#modalhead").html('Add something that reduces ' + issueTitle);  
  }
  // INHIBITED
  else if (idName == "add_inhibited_btn"){
  $("#frm_action").val('R');
  $("#modalhead").html('Add something reduced by ' + issueTitle);   
  }
  // SUPERSET
  else if (idName == "add_super_btn"){    
  $("#frm_action").val('P');
  $("#modalhead").html('Add a Superset of ' + issueTitle);   
  }
  //SUBSET
  else if (idName == "add_sub_btn"){       
  $("#frm_action").val('S');
  $("#modalhead").html('Add a Subset of ' + issueTitle);
  }

  $("#frm_type_id").val(#{@issue.id});
  });
  
  // S A V E    R E F E R E N C E S
  $(".save_reference").click(function(){
  
  var elem = $(this).siblings(".searchfield_smaller")
  var myVariable = elem.val();
  
  // if user has not entered http:// https:// or ftp:// assume they mean http://
  if(!/^(https?|ftp):\/\//i.test(myVariable)) {
  myVariable = 'http://'+myVariable; 
  $(elem).val(myVariable); // also update the form element
  }
  
  if(/^([a-z]([a-z]|\d|\+|-|\.)*):(\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?((\[(|(v[\da-f]{1,}\.(([a-z]|\d|-|\.|_|~)|[!\$&'\(\)\*\+,;=]|:)+))\])|((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=])*)(:\d*)?)(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*|(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)|((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)|((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)){0})(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(myVariable) && myVariable != 'http://') {
  $(this).parents("#new_reference").submit();
  } else {
  $(this).siblings(".ref_error").css({'display' : 'block'});
  return false;
  }
  
  
  });


  // # L I N K S     T O     R E F E R E N C E S
  $(".ref_link").click(function(){
  
  // initialize the background-color back to white
  $("li.ref_li a").animate({'backgroundColor' : '#ffffff'}, 200);
  
  // variable to collect the starting point for highlighting
  var link_href = $(this).attr("href");
  var trimmed_link_href = parseInt(link_href.substring(1,link_href.length));
  
  // variable to collect the number of list items to highlight
  var num_refs = parseInt($(this).attr("rel"));
  
  // highlight the relevant references
  for( i = trimmed_link_href; i <= trimmed_link_href + num_refs - 1 ; i++){
  $("li.ref_li:nth-child(" + i + ") a").animate({'backgroundColor' : '#aaddee'}, 1000);
  }
  
  });

  // T O O L - T I P 
  $(".effect_link, .cause_link, .inhibitor_link, .inhibited_link, .super_link, .sub_link").live('mouseover', function(){
  $('.txt-tooltip').empty();
  $('.img-tooltip').empty();
  var parent_div = ($(this).parents('.cause_effect_container'))
  var sug_offset = parent_div.offset();
  var sug_top    = sug_offset.top;
  var sug_left   = sug_offset.left;
  var sug_height = parent_div.height() + 2;
  var calc_left  = sug_left - 154 + ((parent_div.width()+6)/2); 
  
  tooltip_preview_text = $(this).text().trim();
  
  var url_to_parse = $.trim(url_img_name+encodeURIComponent(tooltip_preview_text)+'&callback=?');
  

  // call the function
  parseJSON_preview(url_to_parse);
    
  // Display the collected data in tooltip
  $("#tool_tip").css({'display' : 'block', 'top' : sug_top + sug_height, 'left' : calc_left});
   
  });

  $(".effect_link, .cause_link, .inhibitor_link, .inhibited_link, .super_link, .sub_link").live('mouseleave', function(){
  $('.txt-tooltip').empty();
  $('.img-tooltip').empty();
  $('.img-tooltip').css({'display' : 'none'});
  $("#tool_tip").css({'display' : 'none'});
  });



  // S M O O T H    D I V    S I Z E    T R A N S I T I O N S (this is cool!)

  // Animates the dimensional changes resulting from altering element contents
  // Usage examples: 
  //    $("#myElement").showHtml("new HTML contents");
  //    $("div").showHtml("new HTML contents", 400);
  //    $(".className").showHtml("new HTML contents", 400, 
  //                    function() {/* on completion */});
  (function($)
  {
  $.fn.showHtml = function(html, speed, callback)
  {
  return this.each(function()
  {
  // The element to be modified
  var el = $(this);

  // Preserve the original values of width and height - they'll need 
  // to be modified during the animation, but can be restored once
  // the animation has completed.
  var finish = {width: this.style.width, height: this.style.height};

  // The original width and height represented as pixel values.
  // These will only be the same as `finish` if this element had its
  // dimensions specified explicitly and in pixels. Of course, if that 
  // was done then this entire routine is pointless, as the dimensions 
  // won't change when the content is changed.
  var cur = {width: el.width()+'px', height: el.height()+'px'};

  // Modify the element's contents. Element will resize.
  el.html(html);

  // Capture the final dimensions of the element 
  // (with initial style settings still in effect)
  var next = {width: el.width()+'px', height: el.height()+'px'};

  el .css(cur) 
  el .animate(next, speed, function()  // animate to final dimensions
  {
  el.css(finish); // restore initial style settings
  if ( $.isFunction(callback) ) callback();
  });
  });
  };
  })(jQuery);


  // S C R O L L - D I V
 
  var step = 30;
  var accepted_step = 64; 
  
  // Next and previous functions for Suggestion Scrollers  
  $(".next").click(function(){
  
  var carousalDiv;
  var parentDiv = $(this).parents().eq(1);
  var className = $(parentDiv).attr('class');

  // CAUSE
  if (className.indexOf("cause") >= 0){
  carousalDiv = $('ul.cause_carousel');
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  carousalDiv = $('ul.effect_carousel'); 
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  carousalDiv = $('ul.inhibitor_carousel');  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  carousalDiv = $('ul.inhibited_carousel'); 
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  carousalDiv = $('ul.super_carousel'); 
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  carousalDiv = $('ul.sub_carousel');
  }
  
  var current_marg_txt = ($(carousalDiv).css('margin-top'))
  var current_marg = parseInt(current_marg_txt.substring(0, current_marg_txt.length - 2))
  
  if (Math.abs(current_marg) < ($(carousalDiv).height())-30){
  
  $(carousalDiv).animate({marginTop:current_marg - step}, 100);
  current_marg = current_marg - step;
  }
  });

  $(".previous").click(function(){

  var carousalDiv;
  var parentDiv = $(this).parents().eq(1);
  var className = $(parentDiv).attr('class');

  // CAUSE
  if (className.indexOf("cause") >= 0){
  carousalDiv = $('ul.cause_carousel');
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  carousalDiv = $('ul.effect_carousel'); 
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  carousalDiv = $('ul.inhibitor_carousel');  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  carousalDiv = $('ul.inhibited_carousel'); 
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  carousalDiv = $('ul.super_carousel'); 
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  carousalDiv = $('ul.sub_carousel');
  }
  
  var current_marg_txt = ($(carousalDiv).css('margin-top'))
  var current_marg = parseInt(current_marg_txt.substring(0, current_marg_txt.length - 2))
  
  if (current_marg < 0){
  
  $(carousalDiv).animate({marginTop:current_marg + step}, 100);
  current_marg = current_marg + step;
  /alert(current_marg);
  }
  });


  // Next and previous functions for accepted Scrollers
  $(".up_scroll").click(function(){

  var carousalDiv;
  var parentDiv = $(this).parents().eq(1);
  var className = $(parentDiv).attr('class');
  // CAUSE
  if (className.indexOf("cause") >= 0){
  carousalDiv = $('.accepted_causes');
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  carousalDiv = $('.accepted_effects'); 
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  carousalDiv = $('.accepted_inhibitors');  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  carousalDiv = $('.accepted_inhibited'); 
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  carousalDiv = $('.accepted_supersets'); 
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  carousalDiv = $('.accepted_subsets');
  }
  var current_marg_txt = ($(carousalDiv).css('margin-top'))  
  var current_marg = parseInt(current_marg_txt.substring(0, current_marg_txt.length - 2))  

  if (current_marg < 0){  
  $(carousalDiv).animate({marginTop:current_marg + accepted_step}, 100);
  }

  });

  $(".down_scroll").click(function(){
  var carousalDiv;
  var parentDiv = $(this).parents().eq(1);
  var className = $(parentDiv).attr('class');
  // CAUSE
  if (className.indexOf("cause") >= 0){
  carousalDiv = $('.accepted_causes');
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  carousalDiv = $('.accepted_effects'); 
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  carousalDiv = $('.accepted_inhibitors');  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  carousalDiv = $('.accepted_inhibited'); 
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  carousalDiv = $('.accepted_supersets'); 
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  carousalDiv = $('.accepted_subsets');
  }
  var current_marg_txt = ($(carousalDiv).css('margin-top'))
  var current_marg = parseInt(current_marg_txt.substring(0, current_marg_txt.length - 2))
  
  if (Math.abs(current_marg) < ($(carousalDiv).height())-64){  
  $(carousalDiv).animate({marginTop:current_marg - accepted_step}, 100);
  }  
  
  });


  // M O D A L - D I V     S H O W / H I D E   
  
  //When you click on a link with class of poplight and the href starts with a # 
  $('a.poplight[href^=#]').click(function() {
  var popID = $(this).attr('rel'); //Get Popup Name
  var popURL = $(this).attr('href'); //Get Popup href to define size

  //Pull Query & Variables from href URL
  var query= popURL.split('?');
  var dim= query[1].split('&');
  var popWidth = dim[0].split('=')[1]; //Gets the first query string value

  //Fade in the Popup and add close button
  $('#' + popID).fadeIn().css({ 'width': Number( popWidth ) }).prepend('<a href="#" class="close"><img src="/images/system/close1.png" class="btn_close" title="Close Window" alt="Close" /></a>');

  //Define margin for center alignment (vertical   horizontal) - we add 80px to the height/width to accomodate for the padding  and border width defined in the css
  var popMargTop = ($('#' + popID).height() + 80) / 2;
  var popMargLeft = ($('#' + popID).width() + 80) / 2;

  //Apply Margin to Popup
  $('#' + popID).css({
  'margin-top' : -popMargTop,
  'margin-left' : -popMargLeft
  });

  //Fade in Background
  $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
  $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer - .css({'filter' : 'alpha(opacity=80)'}) is used to fix the IE Bug on fading transparencies 

  return false;
  });

  //Close Popups and Fade Layer When clicking on the close or fade layer...
  $('a.close, #fade').live('click', function() {
  $('#fade , .popup_block').fadeOut(function() {
  $('#fade, a.close').remove();  //fade them both out
  $('#image_preview').html('<img src = "/images/issues/image.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center">Wikipedia image</div>');
  $('#text_holder ').html('<img src = "/images/issues/text.png" style="background-color:transparent;opacity:0.1" /><div style="text-align:center">Wikipedia text </div>');
  $('#title_holder').html('');
  /$("#query").attr("disabled", ""); 
  /$("#searchfield_reset").css({'display' : 'none'}); 
  $('#form_container').css("display", "none");
  $("#query").val(''); 
  $("#confirm_popup").fadeOut('slow');    
  href_carrier = '';
  });
  return false;
  });

  // O N E    T O U C H    A C C E P T    C A U S E    A N D    E F F E C T     
  $('a.accept_cause, a.accept_effect, a.accept_inhibitor, a.accept_inhibited, a.accept_super, a.accept_sub').click(function(){

  var className = $(this).attr('class');
  
  // CAUSE
  if (className.indexOf("cause") >= 0){
  $("#frm_action").val('C'); 
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  $("#frm_action").val('E');  
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  $("#frm_action").val('I');  
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  $("#frm_action").val('R'); 
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  $("#frm_action").val('P'); 
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  $("#frm_action").val('S'); 
  }

  $("#frm_wiki_url").val("http://en.wikipedia.org/wiki/" + (accept_link_text).split(' ').join('_')); 
  $("#frm_img_url").val($('#onetouch_image').find("img").attr("src"));
  $("#frm_descr").val($('#onetouch_text').html());
  $("#frm_title").val(accept_link_text);
  $("#frm_type_id").val(#{@issue.id});

  $("#new_issue").submit();

  return false;
  });


  $('.accept_cause, a.accept_effect, a.accept_inhibitor, a.accept_inhibited, a.accept_super, a.accept_sub').mouseover(function(){

  var className = $(this).attr('class');
  
  // CAUSE
  if (className.indexOf("cause") >= 0){
  accept_link_text = $(this).siblings(".cause_link").text().trim(); 
  }
  // EFFECT
  else if (className.indexOf("effect") >= 0){    
  accept_link_text = $(this).siblings(".effect_link").text().trim(); 
  }
  // INHIBITOR
  else if (className.indexOf("inhibitor") >= 0){ 
  accept_link_text = $(this).siblings(".inhibitor_link").text().trim();
  }
  // INHIBITED
  else if (className.indexOf("inhibited") >= 0) {
  accept_link_text = $(this).siblings(".inhibited_link").text().trim();
  }
  // SUPERSET
  else if (className.indexOf("super") >= 0) {    
  accept_link_text = $(this).siblings(".super_link").text().trim();
  }
  //SUBSET
  else if (className.indexOf("sub") >= 0){       
  accept_link_text = $(this).siblings(".sub_link").text().trim();
  }

  // create json request url
  var url_to_accept = $.trim(url_img_name+encodeURIComponent(accept_link_text)+'&callback=?');
  // parse the JSON
  parseJSON_accept(url_to_accept);
  //alert($('.img-tooltip').html());
  });


  function parseJSON_accept(url_to_accept) {
  // parse the json
  
  $.getJSON(url_to_accept, function (data_accept) {
  $.each(data_accept, function (key_accept, val_accept) {
  // call the getJson function
  getJson_accept(val_accept);    
  });    
  });
  
  }  
 
  function getJson_accept(JData_accept) {   

  $.each(JData_accept, function (Jkey_accept, Jval_accept) {
  if (Jval_accept && typeof Jval_accept == "object") {
  getJson_accept(Jval_accept);    
  } else {
  //  Throw error if no text was received
  var text_to_accept = $(Jval_accept).filter('p:first').text();

  if(text_to_accept == ''){
  text_to_accept = "No data!"
  
  //  If the search was successful 
  } else {

  // shorten if beyond limit
  if(text_to_accept.length > 450){text_to_accept = text_to_accept.substring(0, 450) + '...';}

  // replace HTML of target Div
  /$("#frm_descr").val(text_to_accept);
  $('#onetouch_text').html(text_to_accept);

  // find the image from Json
  var img_src_accept = $(Jval_accept).find('img.thumbimage').attr('src');  
  
  // if image not found from wikipedia, get it from google
  if (img_src_accept == null){

  // retrieve JSON from google images search and pull the url for first image result
  
  var url_google_img_accept = 'http://ajax.googleapis.com/ajax/services/search/images?rsz=large&start=0&v=1.0&q=';
  $.getJSON(url_google_img_accept+encodeURIComponent(accept_link_text)+'&callback=?', function(data) {
  $.each(data.responseData.results, function(i,item){
  // replace HTML of target Div
  $('#onetouch_image').html('<img src="'+item.tbUrl+'" onError="this.src=\'/images/issues/image.png\'" width="62px" align="middle" />');
  /$("#frm_img_url").val(item.tbUrl);
  if ( i == 0 ) return false;
  });  
  });
  
  // if the image was found from WIKIPEDIA itself, then just go ahead and use that.
  } else {
  // replace HTML of target Div 
  $('#onetouch_image').html('<img src="'+img_src_accept+'" onError="this.src=\'/images/issues/image.png\';" width="62px" align="middle"/>');
  /$("#frm_img_url").val(img_src_accept);
  
  }	  //        END of If structure (checking for Image Success from Wikipedia)	  
  
  }   //      END of If structure (checking for Text Success from Wikipedia)
  
  }   //     END of If structure (checking for type Object)

  }); //   END of Each loop

  }   // END of function     
  
  
  $(".img-expand").click(function(){
  initialize();  
  $(".wikicontent").hide();
  $(".mapcontainer").show();
  });

  $(".descr-expand").click(function(){ 
  $(".mapcontainer").hide();
  $("#map_canvas").empty();
  map = null;
  $(".wikicontent").show();
  });

  /$(".blob-carrier").mouseover(function(){
  
  /$(".arrow-carrier-left, .arrow-carrier-right").fadeIn(1000, function(){
  /$(".arrow-carrier-left, .arrow-carrier-right").fadeOut()
  /});           
  /});

  /$(".blob-carrier").mouseleave(function(){
  /});


  $(".blob-carrier").click(function(){ 
  $("#wikiInfo").toggle();
  $("#superclass_container").toggle();
  $("#effects_inhibiteds_container").toggle();
  $("#subclass_container").toggle();

  $("#blob_sub").toggle();
  $("#blob_effect_inhibit").toggle();
  $("#blob_super").toggle();
  $("#blob_cause_inhibit").toggle();

  $("#arrow_tail_after").toggle();
  $("#arrow_down_after").toggle();

  // Show hide Scroll buttons if required
  if ($(".accepted_supersets").height() > 64){
  $(".super_scroll").css({display : 'inline'});
  }
  
  if ($(".accepted_subsets").height() > 64){
  $(".sub_scroll").css({display : 'inline'});
  }

  if ($(".super_carousel").height() > 30){
  $(".super_scroller").css({display : 'inline'});
  }
  
  if ($(".sub_carousel").height() > 30){
  $(".sub_scroller").css({display : 'inline'});
  }    

  $(".blue_banner").effect("highlight", {color: '#4DB8DB'}, 1000);
  });
  
  
  });  //  E N D    O F    D O C U M E N T     L O A D
  
  function showPopup(title, msg) {
  $("#confirm_title").html(title);
  $("#confirm_msg").html(msg);
  $("#confirm_buttons").show();
  $('body').append('<div id="fade"></div>'); //Add the fade layer to bottom of the body tag.
  $('#fade').css({'filter' : 'alpha(opacity=80)'}).fadeIn(); //Fade in the fade layer - .css({'filter' : 'alpha(opacity=80)'}) is used to fix the IE Bug on fading transparencies   
  $("#confirm_popup").fadeIn('slow');
  }  
  
  var panoramioLayer;
  var map = null;
  function initialize() {
  var nyHarbor = new google.maps.LatLng(52.696361,-0.703125);
  var myOptions = {
  zoom: 1,
  center: nyHarbor,
  mapTypeId: google.maps.MapTypeId.HYBRID 
  };


  /return new google.maps.Map($('#mapCanvas')[0], myOptions); 
  var map = new google.maps.Map(
  document.getElementById("map_canvas"),
  myOptions);
 
  panoramioLayer = new google.maps.panoramio.PanoramioLayer(); 
  panoramioLayer.setMap(map);
  panoramioLayer.setTag('#{@issue.title}');
  /var elem_height = $('.wikicontent').height()-22;
  /var elem_marg_top = -1 * elem_height
  // Ensure that the height of Map remains same as the rest of the content
  /$('#map_canvas').css({'height': elem_height});

  }

  // T O O L - T I P     P R E V I E W 

  function parseJSON_preview(url_to_parse) {

  //Show the spinner
  $('.txt-tooltip').css({'display' : 'block'});
  $("#tool_tip .txt-tooltip").html('<img border="0" src="/images/system/spinner.gif" width="24px"/>'); 

  // parse the json
  $.getJSON(url_to_parse, function (data_prev) {
  $.each(data_prev, function (key_prev, val_prev) {
  // call the getJson function
  getJson_prev(val_prev);    
  });    

  //$('.txt-tooltip').css({'display' : 'block'});
  $('.img-tooltip').css({'display' : 'block'});

  });}  
  

  function getJson_prev(JData_prev) {
   
  $.each(JData_prev, function (Jkey_prev, Jval_prev) {
  if (Jval_prev && typeof Jval_prev == "object") {
  
  getJson_prev(Jval_prev);    
  
  } else {
  
  
  //  Throw error if no text was received
  
  var text_to_preview = $(Jval_prev).filter('p:first').text();

  if(text_to_preview == ''){
  text_to_preview = "No data!"
  
  //  If the search was successful - 
  } else {

  // shorten if beyond limit
  if(text_to_preview.length > 150){text_to_preview = text_to_preview.substring(0, 150) + '...';}

  // replace HTML of target Div
  $('.txt-tooltip').html(text_to_preview);

  // find the image from Json
  var img_src_prev = $(Jval_prev).find('img.thumbimage').attr('src');  
  
  // if image not found from wikipedia, get it from google
  if (img_src_prev == null){

  // retrieve JSON from google images search and pull the url for first image result
  
  var url_google_img_prev = 'http://ajax.googleapis.com/ajax/services/search/images?rsz=large&start=0&v=1.0&q=';
  $.getJSON(url_google_img_prev+encodeURIComponent(tooltip_preview_text)+'&callback=?', function(data) {
  $.each(data.responseData.results, function(i,item){
  // replace HTML of target Div
  $('.img-tooltip').html('<img src="'+item.tbUrl+'" onError="this.src=\'/images/issues/image.png\'" width="62px" align="middle" />');
  if ( i == 0 ) return false;
  });  
  });
  
  // if the image was found from WIKIPEDIA itself, then just go ahead and use that.
  } else {
  // replace HTML of target Div 
  $('.img-tooltip').html('<img src="'+img_src_prev+'" onError="this.src=\'/images/issues/image.png\';" width="62px" align="middle"/>');

  
  }	  //        END of If structure (checking for Image Success from Wikipedia)	  
  
  }   //      END of If structure (checking for Text Success from Wikipedia)
  
  }   //     END of If structure (checking for type Object)

  }); //   END of Each loop
  
  }   // END of function   
  
  
