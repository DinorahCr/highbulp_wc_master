.relationship_vote      

  - if !(current_user.id == @relationship.user_id)
    
    - if current_user.voted_relationships.include?(@relationship)
      - get_vote
      - set_voter_message
    - else 
      - set_initial_message
            
    - if !(current_user.endorsed_relationships.include?(@relationship))    
      // Endorse the validity of a Relationship
      = form_for Vote.new, :remote => true, :id=>"vote_form" do |f|
        .field  
          = f.hidden_field :relationship_id, :value=>@relationship.id
        .field
          = f.hidden_field :user_id, :value=>current_user.id
        .field
          = f.hidden_field :vote_type, :value=>"E"
        .actions
          = f.submit 'Endorse', :class=>"relationship_endorse", :id=>"endorse_collector"
  
    - else
      // Rollback Endorsement
      = button_to 'Unendorse', vote_path(@vote), :method => :delete, :remote=>true, :class=>"relationship_endorse"
  
    
    - if !(current_user.contested_relationships.include?(@relationship))
      // Contest the validity of a Relationship
      = form_for Vote.new, :remote => true, :id=>"vote_form" do |f|
        .field  
          = f.hidden_field :relationship_id, :value=>@relationship.id
        .field
          = f.hidden_field :user_id, :value=>current_user.id
        .field
          = f.hidden_field :vote_type, :value=>"C"
        .actions
          = f.submit 'Contest', :class=>"relationship_contest", :id=>"contest_collector"
      
    - else
      // Rollback contestation
      = button_to 'Uncontest', vote_path(@vote), :method => :delete, :remote=>true, :class=>"relationship_contest"
      
    .clearboth
  
    - if !(current_user.accused_relationships.include?(@relationship))
      // Contest the validity of a Relationship
      = form_for Vote.new, :remote => true, :id=>"vote_form" do |f|
        .field  
          = f.hidden_field :relationship_id, :value=>@relationship.id
        .field
          = f.hidden_field :user_id, :value=>current_user.id
        .field
          = f.hidden_field :vote_type, :value=>"A"
        .actions.discussion_submit
          = f.submit 'Flag as offensive', :id=>"report_offensive"
      
    - else
      // Rollback contestation
      .discussion_submit
        = button_to 'Unflag as offensive', vote_path(@vote), :method => :delete, :remote=>true, :id=>"report_unoffensive"

  - else 
    - set_owner_message   

.user_vote_message
  = @message
  
  
.voters

  - get_vote_percentages
  
  .endorseperc{:style=>"width:#{@endorseperc}%;"}
  .contestperc{:style=>"width:#{@contestperc}%;"}
  .accuseperc{:style=>"width:#{@accuseperc}%;"}
  .clearboth
  = @endorsevotes.to_i
  endorse this
  = @contestvotes.to_i
  contest this
  = @accusevotes.to_i
  accuse this
      
- if @relationship.endorsements.length > 0

  - @relationship.endorsers.each do |endorser|
    - rel_endorser_options = { :size => 27, :title => "", :class => "gravatar_endorse" }
    %a.gravatar_vote{:href=>"/users/#{endorser.id}", :title=>"#{endorser.username}"}
      = gravatar_for(endorser, rel_endorser_options) 

- if @relationship.contestations.length > 0
   
  - @relationship.contesters.each do |contester|  
    - rel_contester_options = { :size => 27, :title => "", :class => "gravatar_contest" }
    %a.gravatar_vote{:href=>"/users/#{contester.id}", :title=>"#{contester.username}"}
      = gravatar_for(contester, rel_contester_options) 

- if @relationship.accusations.length > 0
   
  - @relationship.accusers.each do |accuser|  
    - rel_accuser_options = { :size => 27, :title => "", :class => "gravatar_accuse" }
    %a.gravatar_vote{:href=>"/users/#{accuser.id}", :title=>"#{accuser.username}"}
      = gravatar_for(accuser, rel_accuser_options) 
 
 
.clearboth
      